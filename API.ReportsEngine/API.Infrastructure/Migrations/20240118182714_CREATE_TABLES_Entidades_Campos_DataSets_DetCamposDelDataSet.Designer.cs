// <auto-generated />
using API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Infrastructure.Migrations
{
    [DbContext(typeof(ReportsEngineContext))]
    [Migration("20240118182714_CREATE_TABLES_Entidades_Campos_DataSets_DetCamposDelDataSet")]
    partial class CREATE_TABLES_Entidades_Campos_DataSets_DetCamposDelDataSet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Domain.Entities.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AreaId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("API.Domain.Entities.Campo", b =>
                {
                    b.Property<int>("CampoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampoId"));

                    b.Property<int>("EntidadId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampoId");

                    b.HasIndex("EntidadId");

                    b.ToTable("Campos");
                });

            modelBuilder.Entity("API.Domain.Entities.CampoDBs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AreaID")
                        .HasColumnType("int");

                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FieldID")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CamposDBs");
                });

            modelBuilder.Entity("API.Domain.Entities.DataSet", b =>
                {
                    b.Property<int>("DataSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataSetId"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataSetId");

                    b.ToTable("DataSets");
                });

            modelBuilder.Entity("API.Domain.Entities.DetCamposDeDataSet", b =>
                {
                    b.Property<int>("DetCamposDeDataSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetCamposDeDataSetId"));

                    b.Property<int>("CampoId")
                        .HasColumnType("int");

                    b.Property<int>("DataSetId")
                        .HasColumnType("int");

                    b.Property<string>("Filtro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Orden")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoFiltro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DetCamposDeDataSetId");

                    b.HasIndex("CampoId");

                    b.HasIndex("DataSetId");

                    b.ToTable("DetCamposDelDataSet");
                });

            modelBuilder.Entity("API.Domain.Entities.Entidad", b =>
                {
                    b.Property<int>("EntidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntidadId"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntidadId");

                    b.HasIndex("AreaId");

                    b.ToTable("Entidades");
                });

            modelBuilder.Entity("API.Domain.Entities.Campo", b =>
                {
                    b.HasOne("API.Domain.Entities.Entidad", "Entidad")
                        .WithMany("Campos")
                        .HasForeignKey("EntidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entidad");
                });

            modelBuilder.Entity("API.Domain.Entities.DetCamposDeDataSet", b =>
                {
                    b.HasOne("API.Domain.Entities.Campo", "Campo")
                        .WithMany()
                        .HasForeignKey("CampoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.Entities.DataSet", "DataSet")
                        .WithMany("DetCamposDeDataSets")
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campo");

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("API.Domain.Entities.Entidad", b =>
                {
                    b.HasOne("API.Domain.Entities.Area", "Area")
                        .WithMany("Entidades")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("API.Domain.Entities.Area", b =>
                {
                    b.Navigation("Entidades");
                });

            modelBuilder.Entity("API.Domain.Entities.DataSet", b =>
                {
                    b.Navigation("DetCamposDeDataSets");
                });

            modelBuilder.Entity("API.Domain.Entities.Entidad", b =>
                {
                    b.Navigation("Campos");
                });
#pragma warning restore 612, 618
        }
    }
}
